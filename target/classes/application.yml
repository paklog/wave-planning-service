server:
  port: 9080

spring:
  application:
    name: wave-planning-service

  # MongoDB Configuration
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017/wave_planning}
      database: wave_planning

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: wave-planning-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

  # Spring MVC Configuration
  mvc:
    contentnegotiation:
      favor-parameter: false
      favor-path-extension: false
      media-types:
        json: application/json

# Logging Configuration
logging:
  level:
    root: INFO
    com.paklog.wms.wave: INFO
    org.springframework.kafka: WARN
    org.mongodb.driver: WARN

# Application-specific Configuration
wave:
  planning:
    default-strategy: TIME_BASED
    max-wave-size: 100
    optimization:
      enabled: true

# PakLog Integration Configuration
paklog:
  # Transactional Outbox
  outbox:
    relay:
      enabled: true
      poll-interval: 5000
      batch-size: 50
      max-retries: 3
      source: /wave-planning-service
    cleanup:
      enabled: true
      retention-days: 7

  # Kafka Topic
  kafka:
    topic: warehouse-execution.wave-planning.events
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

  # Feature Flags
  features:
    shadow-mode:
      enabled: ${SHADOW_MODE_ENABLED:false}
      percentage: ${SHADOW_MODE_PERCENTAGE:0}  # 0-100, gradual rollout
      legacy-endpoint: ${LEGACY_ENDPOINT:http://warehouse-operations:8080}
    reconciliation:
      enabled: ${RECONCILIATION_ENABLED:true}
      schedule: ${RECONCILIATION_CRON:0 0 */6 * * *}  # Every 6 hours
      max-variance-percentage: 5.0

  # Circuit Breaker Configuration
  circuit-breaker:
    warehouse-operations:
      failure-rate-threshold: 50
      slow-call-rate-threshold: 50
      slow-call-duration-threshold: 2s
      permitted-calls-in-half-open-state: 3
      sliding-window-size: 100
      minimum-number-of-calls: 10
      wait-duration-in-open-state: 60s

# CloudEvents Configuration
cloudevents:
  kafka:
    topic: warehouse-execution.wave-planning.events
    source: /wave-planning-service

# Actuator Endpoints
management:
  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus
  endpoint:
    health:
      show-details: when-authorized
  health:
    mongo:
      enabled: true
    kafka:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: dev
      service-type: wms
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: http://localhost:4318/v1/traces

# OpenAPI Documentation Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
